[{"content":"","date":"16 December 2022","permalink":"/tags/dsa/","section":"Tags","summary":"","title":"dsa"},{"content":" Making the world a better place, one line of code at a time Hello, my name is Mohamed Allam. I am a self taught software developer, foremerly PHP \u0026amp; Laravel (My Laravel blog), and currently Go, and system programming. I am very passionate about cutting edge technologies, using them to solve real world problems.\nI enjoy teaching everything I know about code, documenting my journey (versus content create), I love teaching on youtube as well, as this blog, algorithms and data structure are my playground. I also help professionals and companies to build their softwares, and I am open to give private lessons to students and enthousiasts. This in parallel with my interest to help free \u0026amp; open source projects, which has been a beautiful journey.\nI breath O_RDWR code, I would eat and act like a human being. in my free time.\nTake a look ","date":"16 December 2022","permalink":"/","section":"Mohamed Allam","summary":"Making the world a better place, one line of code at a time Hello, my name is Mohamed Allam.","title":"Mohamed Allam"},{"content":"This articles breakdown the terminology used in trees data structure, as well as some types of trees and their use cases, to get familiar with them.\nAll computer science is about abstraction as everything is binary, and thats why its sometimes hard to learn, lets break down this terminology.\nAbastract data types # Also known as ADT, lets start our discussion about the primitives or scalar types.\nAbstract data types is abstracting away 0 and 1 from us, Representation and operations, each data types, is represented in some specific way, and can have a set of operations to it. 16 bit intger is 15 bit of 1 and 0, and the left most bit is wether its a signed or unsigned integer. Arthmetic Operations can be done on integers addition, subtraction, multiplication division modulos Relational operations, less than greater than, increment than decrement..ect Primitives or scalar types, is the programming language provided types, like integers, strings, floats..ect We dont concern our selves too much how internally this operations are performed. When we learn programming languages, we mostly learn about representation of data, mostly scalar types, or primitive types and the operations we can do to them.\nSo the concept of representation and definition of data, and operations on the. while hiding the internal details is in essence abstract data types\nFor example in programming languages, we define classes, which has objects, and we give those special behaviours and different details, this is how we define them and there operations. for example we can create a class of linkedlists, with different operations\nAdd(element, index) or inserrt(element, index) Append(element) Remove(element) Set(element) Get(index) Search(key) Sort() ‚Ä¶. This is how we create our own abstract data types, but the thing is, there is some very known and efficient data types, we call them data structure, they allow us to efficiently utilize the resources, the main memory in the most ideal way, and we extend the programming languages to perform what we want us, us developers.\nPhysical data structure # Data structure is collection of data structure, so multiple data stored together.\nThis data structure defines how memory is allocated, they define how the memory will be organized in order for them to store the data.\nArrays # Most programming languages supports arrays its a collection of memory allocation, side by side, back to back. Arrays are fixed size, or arrays size is static, we cannot increase or decrease an array size after its creation, we can only assign to it, or desctruct it (deallocate the memory) Arrays can be created in the stack or the heap, we use a pointer to allocate arrays in the heap. We use arrays when we know the maximum number of elements we need Linedlist # Lined lists are dynamic by nature, you can add more elements or delete them. its a collceiton of data, where each piece is called a node Each node holds data, and a pointer to the next node. Lined lists live in the heap, the head pointer can be in the stack. Logical data structure # This data structure, are an abstraction over the physical datastructure, Physical data structure store the data in memory, physically, but the logical data strucutre is the protocol, the discipline or the set of rules and policies we use to use the physical data structures in way we want for better organiztion of our data.\nAll operations we do to this data structure are defined also by the logic we set. the API.\nThis data structure can be split into two types, linear data structure, and non linear data structure.\nLinear data sturcture # linear data structure include\nStack (LIFO) Queue (FIFO) Non linear data structure # Tree Graph Tabluar # Hash tables Big O notatian # Its how we analyse algorithms and operations on them, how efficient they are specially when we approach infinity. in respect of N input.\nTime complexity # To measure the performance of our data structure, our job is to find out how much work we do per N elements, means for example if to find a word in a dictionary takes you iterating through every single word, means thats Order of N, if you can find the word by just looking at a fraction of the book or a subset, there is high chances, its a log to the two of N, so time complexity is always in respect of our input, or how much element exists in the data we are working with, the job is not to find the exact time it takes, because that varies from machine to machine or from buzy processors to another..ect Our job is to find the least amount of time we need to process N elements, we analyse the behaviour, how much more time we need to get the task done. a behaviour not an exact time.\nSpace complexity # Many times, when we do something, we need extra memory than what we are working with, so in that case, we would have to consider that, because we dont always have extra memory, so thats the memory complexity it can be order of N or less or more, depends on the data type or algorithm we are working with.\nhttps://www.bigocheatsheet.com/ https://www-cs-faculty.stanford.edu/~knuth/taocp.html https://en.wikipedia.org/wiki/Big_O_notation ","date":"16 December 2022","permalink":"/blog/physical-vs-logical-vs-abstract-data-types-dst-and-data-structure-ds/inidex/","section":"Sipping Go","summary":"\u003cp\u003eThis articles breakdown the terminology used in trees data structure, as well as some types of trees and their use cases, to get familiar with them.\u003c/p\u003e","title":"Physical vs Logical vs Abstract Data Types (DST) and data structure (DS)"},{"content":" You complicated code problems simplified. üòç This section contains some blog posts that show how to write efficient Go code. You can choose a category or tag page.\nSidenote: If you want to read my code samples content check to the blog section.\n","date":"16 December 2022","permalink":"/blog/","section":"Sipping Go","summary":"You complicated code problems simplified.","title":"Sipping Go"},{"content":"","date":"16 December 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Competitive programming, is a lot of fun, competition like sports, but using what you know in the DSA world, this course will take you from not knowing anything at all, to actually compete.\nCourse Syllabus # Length: 56H Original: https://www.udemy.com/course/competitive-programming-algorithms-coding-minutes/ Price: $12 Author: Coding minutes Introduction # Introduction Course Structure Exercise Solutions (C++/Java) Doubt Support IDE Environment Setup FAQ\u0026rsquo;s Setting Up Sublime [Optional] # Sublime Setup Adding Master Header File Escaping Online Judges Common Code Snippets Using Macros Example Code Explained Time / Space Complexity Analysis # Space Time Complexity Introduction Experimental Analysis Big O Notation Nested Loops Note : Edit in Nested Loops - II Nested Loops - II Analysis of Bubble Sort Analayis of BInary Search Analysis of Merge Sort Avoiding TLE Errors Complexities for Worst Case AC Data Structures \u0026amp; STL Containers # Data Structures \u0026amp; STL Containers Revisited Arrays in C++ Array STL Vector STL Deque STL Stack STL Queue STL Priority Queue STL [Webinar] Hashing STL [Webinar] More on STL Bitmanipulation Basics # Bitwise Operators Left Shift \u0026amp; Right Shift Odd Even Get ith Bit Clear ith Bit Set ith Bit Update ith Bit Clear Last i Bits Clear Range of Bits Replace Bits Two Power Count Bits Count Bits Hack Make it Binary Bitmanipulation Problems # Unique Number - I Unique Number - I Code Unique Number - II Unique Number - II Code Unique Number - III Unique Number - III Code Finding Subsets Finding Subsets Code Travelling Salesman Problem Travelling Salesman Intution Travelling Salesman Code Travelling Salesman - DP Optimisation Big Integers # Welcome! Introduction to Big Integers Big Addition Concept Big Addition Code Array \u0026amp; Integer Multiplication Large Factorials Java Big Integer Class BigInteger Example Big Integers in Python Python\u0026rsquo;s Handling of Big Integers Big Integer Challenge - Julka Big Integer Challenge Solution Linear Recurrences \u0026amp; Matrix Exponentiation # Binary Exponentiation Modular Binary Exponentiation Fast Mutiplication Matrix Exponentiation Introduction Matrix Exponentiation Code Fibosum (spoj) Fibosum(second approach) Pigeonhole Principle # Pigeonhole Principle Problem DIVSUB Applying Pigeonhole Principle Gray Similar Code Holiday Holiday Code Mathematical Expectation # Expectation Linearity of Expectation Problem - Linearity of Expectation Expected Throws - One Head Expected Throws - Two Consecutive Heads Expected Throws - N Consecutive Heads Bernaulli\u0026rsquo;s Trial Choose Number Bernoulli\u0026rsquo;s Trial Coupon Collector Inclusion Exclusion Principle # Inclusion Exclusion Generalised Function Problems Total Number of Divisors Till N code Prime Numbers \u0026amp; Factorisation # Introduction Prime Sieve Sieve of Eratosthenes Code Prime Queries Prime Factorisation Prime Factorisation Code O(N) Prime Factorisation Code O(Sqrt(N)) Prime Factorisation using Sieve O(LogN) Segmented Sieve Segmented Sieve Algorithm Segmented Sieve Code Extended Euclidean\u0026rsquo;s Algorithm \u0026amp; Applications # GCD Euclid\u0026rsquo;s Algorithm Code GCD Complexity Extended Euclideans Extended Euclidean Example Extended Euclidean Code GCD using Extended Euclidean Algorithm Multiplicative Modulo Inverse Computing Multiplicative Modulo Inverse MMI Code Linear Diophantine Equations Linear Diophantine Equation - Family of Solutions Theorems in Number Theory # Modulo Airthmetic Modulo Arithmetic Code Fermat\u0026rsquo;s Theorem Factorial % P nCr % P Chinese Remainder Theorem Totient Function Totient Function code using Seive Combinatorics # Combinatorics Introduction Binomial Coefficients P \u0026amp; C Formulas Computing Binomial Coefficients Birthday Paradox Birthday Paradox Code Catalan Numbers Catalan Numbers Code - Recursive Catalan Numbers Code - Iterative / DP OEIS Introduction to Algorithms Recursion # Recursion Basics Factorial Fibonacci Series Sorted Array Check Understanding Recursion DIrections Power Function Fast Power Tiling Problem Count Strings Friend\u0026rsquo;s Pairing Problem Tower Of Hanoi Tower Of Hanoi (code) Backtracking # Backtracking Problems Finding Subsets Finding Subsets Code Permuations Brackets Brackets Code N-Queen N-Queen Code N-Queen Ways Sudoku Solver Sudoku Solver Code Binary Search # Binary Search Binary Search Code Lower Bound and Upper Bound Lower Bound Code Angry Birds Angry Bird Code Game of Greed Game of Greed Code Divide \u0026amp; Conquer # Merge Sort Merge Sort Code Quick Sort Quick Sort Code Quick Select Quick Select Code Inversion Count Inversion Count Code Ternary Search Ternary Search - Finding maxima/minima of a parabola (Code) Greedy Algorithms # Greedy Introduction Indian Coin Change Greedy vs DP Activity Selection / Busyman Baised Standings Kingdom Defense Meet In The Middle # Introduction Subsums Code Segment Trees # Introduction to Range Queries Introduction and Structure Building Query Update Facts and Properties Code Lazy Propagation # Introduction Algorithm Code Bug and Code Continued Fenwick Trees # Structure Query Update Code Inversion Count (Multiple Ways of solving it) Inversion Count Using Fenwick Tree Inversion Count Using Fenwick Tree Code Sqrt Decomposition # Sqrt Decomposition Introduction Range queries (Code) DQUERY SPOJ using Mo\u0026rsquo;s Algorithm Sorting the queries according to MO\u0026rsquo;s comparator 4 Pointers Technique Code and Complexity of MO\u0026rsquo;s Algorithm DQUERY using Fenwick Tree Combinatorial Games # Game Theory Introduction Combinatorial Games Take Away Games N and P positions The Game Of NIM # Game of Nim Nim Sum Applications of Nim Sum Examples of Nim Games Graph Traversals # Graphs Introduction Introduction Graph Key Concepts Adjacency List Adjacency List BFS Concept BFS DFS DFS Code Shortest Path Shortest Path Code Board Game Board Game Code Graphs as Trees # Trees DFS on Trees DFS Trees and Backedges DFS Tree and Backedges Code Lowest Common Ancestors # LCA introduction LCA Brute Force LCA using Binary Lifting Directed Graphs \u0026amp; SCC\u0026rsquo;s # Intro Topological Sort SCC Theory Condensed Component Graph Kosaraju Algorithm for Strongly Connected Component Kosaraju Algorithm Code Disjoint Set Union Data Structure # DSU Introduction DSU Data Structure Union \u0026amp; Find Ops DSU Implementation Union By Rank Path Compression Spanning Trees # Dry Run Prim\u0026rsquo;s Algorithm Prim\u0026rsquo;s Code Kruskal\u0026rsquo;s Algorithm Kruskal\u0026rsquo;s Code Shortest Paths Algorithms # Shortest Path Introduction Dijkstra\u0026rsquo;s Algorithm Dijkstra\u0026rsquo;s Algorithm Code Bellman Ford Algorithm Bellman Ford Code Floyd Warshall Algorithm Floyd Warshall Code Classical Dynamic Programming # Introduction to Dynamic Programming A Note About DP N-K Ladders N-K Ladders Top Down N-K Ladders Bottom Up Minimum Jums Minimum Jumps Code Longest Increasing Subsequence Longest Increasing Subsequence Code Box Stacking Problem Box Stacking Code Advance Dynamic Programming Problems # Terms and Definitions Tabulation vs Memoisation Frogs - 1 Frogs - 2 Vacation Knapsack 1 Knapsack 2 LCS LCS (code) Longest Path Longest Path (code) Grid 1 Grid 1 (code) Coins Coins (code) Sushi Sushi (code) Stones Deque (first solution) Deque (second solution) Candies Candies (code) Slimes Slimes (code) Matching Matching continued\u0026hellip; Matching (code) Independent Set Independent Set (code) Flowers Flowers using segment tree Flowers (code) Walk Walk (code) Digit Sum Digit Sum (code) Permutation Permutation (Brute Force) Permutation (code) Pattern / String Matching # Introduction to Advanced Module! Brute Force Pattern Matching using STL Trie Pattern Matching using Trie String Hashing - Polynomial Hash Function Polynomial Hash Code Rolling Hash / Rabin Karp Algorithm Rabin Karp algorithm Code Geometric Algorithms - Convex Hull # Introduction Orientation of Points Graham\u0026rsquo;s Scan algorithm Graham\u0026rsquo;s Scan Algorithm Code Problem - Polygon (Codeforces) Interactive Problems # Introduction Codeforces - Guess the Number Guess the Number - code Lost Numbers Lost Numbers (code) Xor Guessing Xor Guessing (code) Random Randomisation # Randomised Random Function Run Code for a Particular Time Policy Based Data Structures # Introduction \u0026amp; Applications Structure and Working Using Coding Minutes IDE Inversion Count using PBDS CP Guidance # Getting started with Codeforces / Spoj Where to practice? ","date":"13 December 2022","permalink":"/blog/udemy/competitive-programming-algorithms-coding-minutes/","section":"Sipping Go","summary":"\u003cp\u003eCompetitive programming, is a lot of fun, competition like sports, but using what you know in the DSA world, this course will take you from not knowing anything at all, to actually compete.\u003c/p\u003e","title":"Competitive Programming Essentials, Master Algorithms 2022"},{"content":"Coding interviews, remain one of the challenging tasks for software developers, this course will teach you what you need to make it through this time.\nCourse Syllabus # Length: 30H Multi-select: Arrays, Graphs, Hashing (Unordered Maps Maps Sets), Hashing functions, Heap, Linked Lists, Queues, Stacks, Strings, Tries, Vectors Original: https://www.udemy.com/course/cpp-data-structures-algorithms-levelup-prateek-narang/ Price: 12 Text: Coding minutes Welcome to Course! # Course Orientation! How to do this course? C++/Java Code Repository! TA Hours/ Doubt Support Guidelines Exercise Solutions! Q/A Section Arrays \u0026amp; Vectors # Introduction Vector STL - Demo Vector of Vector - Demo How to submit coding exercises? A Note on Sorting! Helpful Webinars [Optional] Pairs Pairs Code Triplets Triplets Code Mountain Mountain Code Longest Band Longest Band Code Rains Rains Code Subarray Sort Subarray Sort Code Minimum Swaps Minimum Swaps Code String Problems # Strings Introduction Searching Inside String! Solution : Search All! Space20 Space20 Implementation Tokenisation (using sstream) Tokenisation (using strtok) Designing our own String Tokeniser! String Key Sort String Key Sort Implementation Check Subsets Check Subsets Implementation Sort Subsequences Sort Subsequences Code Solution : String Normalisation Bit-manipulation Techniques # Bitwise Operators Left Shift \u0026amp; Right Shift Check Odd/Even Get ith Bit Set ith Bit Clear ith Bit Update ith Bit Clear last i Bits Replace Bits Challenge Two Power Counting Set Bits Counting Bits Hack Fast Exponentiation Problem - Decimal to Binary Sliding Window Problems # Sliding Window Introduction Housing (Two Pointer) Housing Implementation Unique Substring (Hashing) Unique Substring Implementation String Window String Window Implementation Sorting \u0026amp; Searching # Merge Sort Merge Sort Code Inversion Count Inversion Count Code Quick Sort Quick Sort Code Quick Select Quick Select Code Smallest String Smallest String Code Sparse Search Sparse Search Code Binary Search # Binary Search - Recap! Frequency Count Frequency Count Code-I Frequency Count Code-II Rotated Search Rotated Search Code Finding Roots Square Roots Code Angry Birds Angry Birds Code Min Pairs Min Pairs Code Game of Greed Concept Solution - Game of Greed Solution : Game of Greed Recursion Problems # Recursion Recap Ladders Concept Ladders Code Subsequence Based Problems Subset Sum to X Subset Sum to X Code Generate Brackets Generate Brackets Code Smart Keypad Smart Keypad Code Permutations N-Queen Problem N-Queen Code N-Queen Code Sudoku Sudoku Code Linked Lists Problems # Linked List Section Introduction Warm Up - Creating a Linked List Practice - Insertion in the Middle Recursive Reverse a Linked List Recursively Reverse a Linked List Code Iterative Reverse Iteratively Reverse a Linked List Code K-Reverse a Linked List K-Reverse Code Merge Two Sorted Linked Lists Merge Two Sorted Linked Lists Code Runner Technique Merge Sort on Linked List Merge Sort Linked List Code Stacks \u0026amp; Queue Problems # Stacks, Queue, Deque Recap Balanced Paranthesis Balanced Paranthesis Code Redundant Paranthesis Redundant Paranthesis Code First Non-Repeating Letter First Non-Repeating Code Max Subarray (Sliding Window + Deque) Simplify Path Simplify Path Code Solution : Stock Span Binary Trees Problems # Binary Trees Recap Build Tree - Boilerplate Code Level Order Print Level Order Print Code Level Order Build Level Order Build Code Tree Diameter Concept Tree Diameter Code Tree Diameter Optimised Code Replace with Descendant Sum Replace with Descendant Sum Code Height of Tree Height Balanced Tree Concept Height Balanced Tree Code Max Subset Sum Tree Max Subset Sum Tree Code Print At LevelK Nodes at Distance K Nodes at Distance K Code Vertical Order Print Vertical Order Print Code BST Problems # BST Introduction BST Creation Recap Minimum Height BST Minmum Height BST Code Closest in BST Closest in BST Code Tree to Linked List Tree 2 Linked List Code Inorder Successor in BST Inorder Successor in BST Code Priority Queue Problems # Heaps - Recap! Sorting using Heap! Finding Cabs Finding Cabs Implementation Merging Ropes Merging Ropes Implementation Running Median Running Median Implementation Merging K-Arrays Merge K-Sorted Arrays Code Hashing Problems # Introduction to Hashing Triplets in GP | Hashing with Slider Triplets in GP Implementation Counting Rectangles | Sets Counting Rectangles Implementation Counting Triangles | Unordered Maps Counting Triangles Implementation Anagrams in Substrings | Maps Anagrams in Substrings Implementation Quick Brown Fox | Hashing with DP Quick Brown Fox Implementation Tries \u0026amp; Pattern Matching Problems # Tries Introduction Prefix Trie Implementation Suffix Trie Suffix Trie Implementation Cute Little Cat (Trie + Hashing) Cute Little Cat Implementation Biggest XOR (Trie + Bitmasks) Biggest XOR Implementation Graphs Problem Solving # Graphs Section Introduction Graphs 10 Cool Applications Graph Key Terms Adjacency List Representation Adjacency List Representation with Node Class Storing Weighted Graphs Breadth First Search (BFS) BFS Code Shortest Path using BFS Shortest Path using BFS Code Solution - Snakes \u0026amp; Ladders Depth First Search (DFS) DFS Code Cycle Detection in Undirected Graphs Solution - Cycle Detection in Undirected Graph Backedge Detection Solution - Cycle Detection in Directed Graph Dijkshtra\u0026rsquo;s Algorithm Dijkshtra\u0026rsquo;s Algorithm Code Board Game (Trie+Backtracking+Graph) Board Game Implementation Solution - Shortest Grid Path Solution - Largest Island Solution - Graph Sequence Dynamic Programming (1D) # Introduction to Dynamic Programming A Note about DP N-K Ladders (3 Approaches) N-K Ladders Code (Top Down) N-K Ladders Code (Bottom Up) Coin Change Coin Change Code Cutting Rods Solved! Min Array Jumps Min Array Jumps Code Frog\u0026rsquo;s Min Cost-I Frog\u0026rsquo;s Min Cost-I Code Maximum Non Adjacent Sum Maximum Non Adjacent Sum Code Longest Increasing Sequence Longest Increasing Subsequence Code Box Stacking Problem Box Stacking Code Counting Trees Counting Trees Code Counting Trees Bottom Up Code Dynamic Programming (2D) # Longest Common Subsequence LCS Top Down LCS Bottom Up \u0026amp; Print Selling Wines Selling Wines - Top Down DP Code Note about Selling Wines Selling Wines - Diagonal Table Filling Selling Wines - Bottom Up DP Code Counting Subsequences Counting Subsequences Recursive Counting Subsequences - Table Filling Counting Subsequences - Bottom Up Knapsack Problem Knapsack Problem Recursive Knapsack Problem Bottom Up DSA Project - LRU Cache # LRU Cache Introduction LRU Data Structure LRU Code-I LRU Code - II LRU Code - III LRU Code - IV ","date":"13 December 2022","permalink":"/blog/udemy/cpp-data-structures-algorithms-levelup-prateek-narang/","section":"Sipping Go","summary":"\u003cp\u003eCoding interviews, remain one of the challenging tasks for software developers, this course will teach you what you need to make it through this time.\u003c/p\u003e","title":"Data Structures \u0026 Algorithms, Level-up for Coding Interviews"},{"content":"Assuming you have leared that Dynamic programming is your obstacle, after taking this course, you will thank me.\nCourse Syllabus # Length: 44H Original: https://www.udemy.com/course/dynamic-programming-master-course-coding-minutes/ Price: 12 Text: Coding minutes Introduction # Introduction Instructions [Optional] Setting Up Coding Environment # Sublime Setup Add Master Header File Escaping Online Judges Common Code Snippets Using Macros Example Code Basics of Recusion # Recursion Introduction Factorial Fibonacci Sorted Array Increasing Decreasing Number Power Function Power Function Fast Tiling Problem Count Strings Friends Pairing Problem Tower Of Hanoi Tower Of Hanoi (code) Backtracking # Backtracking Introduction Finding Subsets Finding Subsets Code N-Queen N-Queen Backtracking Code N-Queen Count Ways Generate Brackets Generate Brackets Code Sudoku Solver Suodoku Code Hamiltonian Paths Backtracking Hamiltonian Paths Backtracking (code) Assignments Introduction to Dynamic Programming # Terms and Definitions Tabulation vs Memoisation Recursion is Everywhere - I Recursion is Everywhere - II Big TIP 1-D Dynammic Programming # Introduction SUPW (Zonal Computing Olympiad) SUPW (code) IPL Min steps to reach one Alphacode Alphacode (code) Rod Cutting Rod Cutting (code) House Robber Palindromic Partioning Assignments 2-D DP Deep Dive : SubSet Sum Problem # Subset Sum (problem) Subset sum (code) Subset Sum with Repeating Numbers Subset Sum Repeating Numbers (code) Subset Sum (Tabulation) Subset Sum Tabulation (code) Memory Optimisation - Subset Sum Memory Super Optimisation - Subset Sum Tracing Back Solutions Modulo Sum (codeforces) Assignments 2D DP: Deep Dive Knapsack Problem # Introduction and greedy approaches 0/1 Knapsack Knapsack (code) 0/N Knapsack Colourful Knapsack 2D DP problems # Paint House Paint House (code) Paint House(follow up) Make Fence Great Again (codeforces) Assignments Partition Problems # Plates Plates (code) Best Time to Buy and Sell Stock Best Time to Buy and Sell Stock (code) Partition Array for Maximum Sum Partition Equal Sum Subset Split Array largest Sum Split Array Largest Sum (code) Palindromic Partitioning 2 Palindromic Partitioning 2 (code) Assignments Combinatorics and Dynammic Programming # Tiling Problem - 1 Tiling Problem - 2 Tiling problem - 3 Tiling Problem - 3 (code) Advance Tiling problem (SPOJ - M3TILE) with code Number of jumps to reach n Binomial Coefficients Friends pairing Problem Partition N into positive integers Ordered Pair (code) Unordered Pair (code) Solved! Unordered Pair (another recurrence relation) Assignments Subsequences and Dynammic Programming # Longest Increasing Sequences Longest Increasing Sequence (code) Good Sequences Good Sequences (code) Consecutive Sequences Consecutive Sequences (code) Assignments K - Dimensional Dynammic Programming # Multi - Dimensional DP Assignments Digit Dynammic Programming # Introduction Recursive Code Sum Of Digits Investigation + Code Tricks involved Typo! sorry Magic Number (codeforces) Magic Number (code) Nit pick Assignments Dynammic Programming on Trees # Introduction Vertex Cover (greedy) Definitions and Rules Vertex Cover DP DP code (Recursion + Memoisation) DP on trees using DFS DP on trees using BFS Tree Diameter (cses) Tree Diameter (code) Tree Diameter (NitPick) Distance Tree 1 (CSES) Distance Tree 1 (code) Tree Distance 2 Tree Distance 2 (code) Assignments Trees and Lowest Common Ancestors (DP) # Company Queries 1 Binary Lifting using Dynamic Programming Company Queries 1(code) LCA Assignments Dynammic Programming on Graphs # Intro DFS Tree and Backedges DFS Tree and Backedges (code) DFS Trees and Backedges in Directed Graphs Intro to Articulation Points and Bridges DP - Discovery Time Lowest Time Articulation Point and Bridges concept Articulation Point and Bridges(code) Assignments DP on Strings # Edit Distance Edit Distance code (top-down) Edit distance (bottom up) Longest Common Subsequence Longest Common Substring Wildcard Pattern Matching Wildcard Pattern Matching (code) Regular Expression Matching Regular Expression Matching Code Interleaving Strings Interleaving Strings (code) Palindromic Substrings Longest Palindromic Subsequences Assignments Dynammic Programming with Bitmasks # Bit Manipulation Basics Hamiltonian Paths Hamiltonian Paths - Recursion + Memoisation Code Changing Iteration over permutations to iteration over subsets Binary masking factorials Bitmask For Optimisations Bitmask For Optimisations (Code) Dp Bitmasking Bottom Up Code Optimal Selection Optimal Selection code Elevator Problem Elevator Problem (code) Must Try SOS DP # Note Intro Code Assignments Matrix Exponentiation and Dynamic Programming # Binary Exponentiation Modular Exponentiation Fast Multiplication Matrix Exponentiation Matrix Exponentiation Code Fibosum (spoj) first approach Fibosum (spoj) second approach Assignments Game Theory and Dynamic Programming # Combinatorial Games Game Theory Problems using DP Mesere Rule Examples N/P Positions Chessboard Game Stone Division Assignments Dynammic Programming with Advance Data Structures # Intro Segment Trees - SUPW with K SUPW with K (code) Fenwick Trees - Longest Increasing Subsequence (nlogn) LIS(code) Using Sparse Matrix Tips and tricks # Forward vs Backward DP approaches Same state and multiple recurrence relations Recover the best solutions Super Duper Memory and Time Optimisation - Subset Sum Challenging DP Problems # Assignments Additional Problem to Try! # Assignments At Coder Dynammic Programming Educational Contest (A-Z) # Warning Frogs - 1 Forgs - 2 Vacation Knapsack - 1 Knapsack - 2 LCS LCS(code) Longest Path Longest Path (code) Grid 1 Grid 1 (code) Coins Coins (code) Sushi Sushi (code) Stones Deque (First solution) Deque (Second Solution) Candies Candies(code) Slimes Slimes (code) Matching Matching continues Matching (code) Independent Set Independent Set(code) Flowers Flowers using Segment Tree Flowers(code) Walk Walk(code) Digit Sum Digit Sum (code) Permutation Permutation Brute Force Permutation (code) Grouping Grouping (code) ","date":"13 December 2022","permalink":"/blog/udemy/dynamic-programming-master-course-coding-minutes/","section":"Sipping Go","summary":"\u003cp\u003eAssuming you have leared that Dynamic programming is your obstacle, after taking this course, you will thank me.\u003c/p\u003e","title":"Dynamic Programming Algorithms Master Course (2022)"},{"content":"This is one of the great courses in udemy, on the subject, and his graph theory course.\nCourse Syllabus # Length: 8H Link: https://www.udemy.com/course/introduction-to-data-structures/ Price: $12 Author: William fiset Samples he has on his channel Introduction # Abstract data types Introduction Understanding time/space complexity Static and dynamic arrays # Static and dynamic arrays Dynamic array source code Linked lists # Linked list introduction Doubly linked list source code Stacks # Understanding stacks Stack implementation details Stack source code Queues # Understanding queues Breadth first search and queue implementation Queue source code Priority queues # What is a priority queue? Min heaps and Max heaps Priority queue inserting elements Priority queue removing elements Priority queue source code Union find/Disjoint set # Union find introduction Kruskal\u0026rsquo;s Algorithm Union and find operations Path compression Union find source code Binary search trees # Introduction to binary trees Binary search tree insertions Binary search tree removals Binary tree traversals Binary search tree source code Hash tables # Hash table hash functions Hash table separate chaining Hash table separate chaining source code Hash table open addressing Hash table linear probing Hash table quadratic probing Hash table double hashing Hash table removing key-value pairs Hash table open addressing source code Fenwick tree/Binary indexed tree # Fenwick tree range queries Fenwick tree point updates Fenwick tree construction Fenwick tree source code AVL Tree # Tree rotations AVL tree insertions AVL tree removals AVL tree source code Indexed Priority Queue # Introduction to indexed priority queues Indexed priority queue source code Sparse Tables # Sparse Table Sparse Table Source Code ","date":"13 December 2022","permalink":"/blog/udemy/introduction-to-data-structures/","section":"Sipping Go","summary":"\u003cp\u003eThis is one of the great courses in udemy, on the subject, and his graph theory course.\u003c/p\u003e","title":"Easy to Advanced Data Structures"},{"content":"","date":"13 December 2022","permalink":"/tags/golang/","section":"Tags","summary":"","title":"golang"},{"content":"Graph theory remain challenging, especially in the scope of competitive programming, this is your best friend to succeed your next challenge.\nCourse Syllabus # Length: 23H Multi-select: Graphs Original: https://www.udemy.com/course/graph-theory-algorithms-for-competitive-programming/ Price: $12 Text: Coding minutes Introduction # Course Orientation! Q/A Section \u0026amp; Discord Community Graphs Code Repository C++ and Java! Exercise Solutions - Code Repository! Sharing Feedback Setting Up Sublime [optional] # Sublime Setup Adding Master Header File Escaping Online Judges Common Code Snippets Using Macros Example Code Explained Graph Representation # Graphs Introduction Graph Applications Graph Key Terms Adjacency List Representation Adjacency List Representation with Node Class Some Helpful Webinars [Optional] Breath First Search # Breadth First Search BFS Code BFS Shortest Path BFS Shortest Path Code Snakes and Ladder Solution Depth First Search # DFS Concept DFS Code Largest Island Solution Cycle Detection # Cycle Detection in Undirected Graph Cycle Detection in Undirected Graph Code Directed Graph - Cycle Detection Directed Graph - Cycle Detection Code Bipartite Graph Bipartite Graph Code Directed Acyclic Graph # Directed Acyclic Graph \u0026amp; Topological Ordering Topological Sort Algorithm Topological Ordering BFS Code Toplogical Order using DFS Topological Ordering using DFS Code Disjoint Set Union # Disjoint Set Union Introduction DSU Data Structure - Union \u0026amp; Find Ops DSU Data Structure DSU Implementation Union by Rank Path Compression Optimisation DSU Dry Run Minimum Spanning Trees # Introduction to Minimum Spanning Trees! Prim\u0026rsquo;s Algorithm Prim\u0026rsquo;s Code Kruskal\u0026rsquo;s Algorithm Kruskal\u0026rsquo;s Code Shortest Path Algorithms # Introduction to Shortest Path Algorithms Dijkshtra\u0026rsquo;s Algorithm Dijkshtra\u0026rsquo;s Algorithm Code Bellman Ford Algorithm Bellman Ford Code Floyd Warshall Floyd Warshall Code Solution - Shortest Path in Grid! Travelling Salesman Problem # Travelling Salesman Problem Travelling Salesman Intution TSP Brute Force TSP DP + Bitmasking Flood Fill # Flood Fill Introduction Number of Islands Coloring Islands Biggest Island Make Largest island Multi - Source BFS # Introduction to Multi Source BFS Problem on Multi Source BFS Bonus Problem on Multi Source BFS 0/1 BFS DFS-Tree and Backedges # Introduction to DFS tree and Backedges DFS Tree and backedges in Undirected graph DFS Tree and Backedges in Directed and Undirectde graphs Print cycle in a graph Articulation Points \u0026amp; Bridges # Introduction and definitions Discovered Time Lowest Time or Low Link Algorithm Coding the Algorithm Strongly Connected Components # Introduction to Topological Order and Strongly Connected Components Algorithm and Code to find Topological Ordering Introduction to Strongly Connected Component Condensed Component Graph Kosaraju Algorithm for Strongly Connected Component Kosaraju Algorithm for Strongly Connected Component Code Trees # Introduction and properties of trees DFS on trees Print all ancestors in a tree Euler Tour # Introduction Applications Code LCA # Introduction LCA (Brute Force) LCA using Binary Lifting Re-rooting of trees # Introduction and brute force Approach to re root the tree Code for re rooting of the tree Dynamic Programming On Trees # DP introduction Vertex Cover (greedy) Definitions and Rules Vertex Cover DP DP code (Recursion + Memoisation) DP on trees using DFS DP on trees using bfs Tree Diameter CSES Tree Diameter (code) Nitpick Distance Tree 1 Distance Tree (code) Try These Network Flow # Introduction to Network Introduction to Maximum Flow in a Network Residual Networks and Augmenting Paths Ford-Fulkerson and Edmond-Karp Algorithm Dinic\u0026rsquo;s Algorithm Dinic\u0026rsquo;s Algorithm Code Applications of Max Flow as Maximum Bipartite Matching Bonus : Graph + Data Structures # Board Game Board Game Code ","date":"13 December 2022","permalink":"/blog/udemy/graph-theory-algorithms-for-competitive-programming/","section":"Sipping Go","summary":"\u003cp\u003eGraph theory remain challenging, especially in the scope of competitive programming, this is your best friend to succeed your next challenge.\u003c/p\u003e","title":"Graph Theory Algorithms for Competitive Programming"},{"content":"If you know and love mathematics, dont waste yuor time, this course is your best bet.\nCourse Syllabus # Length: 56H Original: https://www.udemy.com/course/datastructurescncpp/ Price: $12 Author: Abdul Bari Samples he has on his channel Before we Start # Instructor\u0026rsquo;s Note Introduction Essential C and C++ Concepts # Arrays Basics Practice : Arrays Basics Structures Practice : Structures Pointers Practice : Pointers Reference in C++ Practice : Reference Pointer to Structure Practice : Pointer to Structure Functions Practice : Functions Parameter Passing Methods Practice : Parameter Passing Methods Array as Parameter Practice : Array as Parameter Structure as Parameter Practice : Structure as Parameter Structures and Functions (Must Watch) Converting a C program to a C++ class (Must Watch) Practice : Monolithic Program Practice : Modular Program Practice : Structure and Functions Practice : Object-Oriented Program C++ Class and Constructor Practice : C++ Class Template classes Practice : Template Class Required Setup for Programming # Online C and C++ compiler Setup CodeBlocks and Settings Setup Dev-C++ and Settings Debugging using Dev-C++ Debugging using CodeBlocks Setup Visual Studio Debugging using Visual Studio Setup Xcode Introduction # Introduction Stack vs Heap Memory Stack vs Heap. Continued\u0026hellip; Physical vs Logical Data Structures ADT Time and Space Complexity Time and Space Complexity from Code Recursion # How Recursion Works ( Tracing ) Generalising Recursion How Recursion uses Stack Recurrence Relation - Time Complexity of Recursion Lets Code Recursion Static and Global Variables in Recursion Let\u0026rsquo;s Code Static and Global in Recursion Tail Recursion Head Recursion Tree Recursion Let\u0026rsquo;s Code Tree Recursion Indirect Recursion Let\u0026rsquo;s Code Indirect Recursion Nested Recursion Let\u0026rsquo;s Code Nested Recursion Sum of Natural Number using Recursion Let\u0026rsquo;s Code Sum of N using Recursion Factorial using Recursion Let\u0026rsquo;s Code Factorial using Recursion Power using Recursion Let\u0026rsquo;s Code Power Recursion Taylor Series using Recursion Let\u0026rsquo;s Code Taylor Series using Recursion Taylor Series using Horner\u0026rsquo;s Rule Let\u0026rsquo;s Code Taylor Series Horner\u0026rsquo;s Rule - Recursion Let\u0026rsquo;s Code Taylor Series Iterative Fibonacci Series using Recursion - Memoization Let\u0026rsquo;s Code Fibonacci nCr using Recursion Let\u0026rsquo;s Code nCr using Recursion Tower of Hanoi Problem Let\u0026rsquo;s Code Tower of Hanoi Quiz 1 Solutions Arrays Representations # Introduction to Array Declarations of Array Demo - Array Declaration Static vs Dynamic Arrays Demo - Static vs Dynamic Array How to Increase Array Size Demo - Increasing Array Size 2D Arrays Demo - 2D Array Array Representation by Compiler Row Major Formula for 2D Arrays Column Major Formula for 2D Arrays Formulas for nD Arrays Formulas for 3D Arrays Solutions for Quiz 2 Array ADT # Array ADT Demo - Array ADT Inserting in an Array Let\u0026rsquo;s Code Insert Deleting from Array Let\u0026rsquo;s Code Delete Linear Search Improving Linear Search Let\u0026rsquo;s Code Linear Search Binary Search Binary Search Algorithm Let\u0026rsquo;s Code Binary Search Analysis of Binary Search Average Case Analysis of Binary Search Get( ) Set( ) Avg( ) Max( ) functions on Array Let\u0026rsquo;s Code Get() Set() Max() on Array Reverse and Shift an Array Lest\u0026rsquo;s Code Reversing an Array Check if Array is Sorted Let\u0026rsquo;s Code to check if Array is Sorted Merging Arrays Let\u0026rsquo;s Code to Merge Arrays Set operations on Array - Union, Intersection and Difference Let\u0026rsquo;s Code Set operations on Array Let\u0026rsquo;s Code a Menu Driver program for Arrays Let\u0026rsquo;s convert C program for Array to C++ Let\u0026rsquo;s Put all together in C++ program for Array Student Challenge : Finding Single Missing Element in an Array Student Challenge : Finding Multiple Missing Elements in an Array Student Challenge : Finding Missing Element in an Array Method 2 Student Challenge Finding Duplicates in a Sorted Array Student Challenge : Finding Duplicates in Sorted Array using Hashing Student Challenge : Finding Duplicates in a Unsorted Array Student Challenge : Finding a Pair of Elements with sum K Student Challenge : Finding a Pair of Elements with sum K in Sorted Array Student Challenge : Finding Max and Min in a single Scan Solutions for Quiz 3 Strings # Introduction to Strings Finding Length of a String Changing Case of a String Counting Words and Vowels in a String Validating a String Reversing a String Comparing Strings and Checking Palindrome Finding Duplicates in a String Finding Duplicates in a String using Bitwise Operations Checking if 2 Strings are Anagram (distinct letters) Permutation of String Matrices # Section Introduction Diagonal Matrix Let\u0026rsquo;s Code Diagonal Matrix C++ class for Diagonal Matrix Let\u0026rsquo;s Code C++ class for Diagonal matrix Lower Triangular Matrix Row-Major Mapping Lower Triangular Matrix Column-Major Mapping Let\u0026rsquo;s Code Lower Triangular Matrix in C Let\u0026rsquo;s Code Lower Triangular Matrix in C++ Upper Triangular Matrix Row-Major Mapping Upper Triangular Matrix Column-Major Mapping Symmetric Matrix Tri-Diagonal and Tri-Band Matrix Toeplitz Matrix Menu Driven Program for Matrices Menu Driven Program for Matrices using Functions How to Write C++ Classes for All Matrices Sparse Matrix and Polynomial Representation # Sparse Matrix Representation Addition of Sparse Matrices Array Representation of Sparse Matrix Let\u0026rsquo;s Code to Create Sparse Matrix Program for Adding Sparse Matrix Let\u0026rsquo;s Code to Add Sparse Matrix Let\u0026rsquo;s Code Sparse Matrix using C++ Let\u0026rsquo;s Code Sparse Matrix using C++ Continued\u0026hellip;.. Polynomial Representation Polynomial Evaluation Polynomial Addition Let\u0026rsquo;s Code Polynomial Linked List # Why we need Dynamic Data Structure Linked List About Linked List More About Linked List Display Linked List Let\u0026rsquo;s Code Display for Linked List Recursive Display of Linked List Let\u0026rsquo;s Code Recursive Display for Linked List Counting Nodes in a Linked List Sum of All Elements in a Linked List Let\u0026rsquo;s Code Count and Sum Maximum Element in a Linked List Let\u0026rsquo;s Code Max for Linked List Searching in a Linked List Improve Searching in Linked List Let\u0026rsquo;s Code Searching in Linked List Inserting in a Linked List Let\u0026rsquo;s Code Insert for Linked List Creating a Linked List using Insert Creating a Linked List by Inserting at Last Inserting in a Sorted Linked List Let\u0026rsquo;s Code Insert in Sorted Linked List Deleting from Linked List Let\u0026rsquo;s Code Delete on Linked List Check if a Linked List is Sorted Let\u0026rsquo;s Code to check if Linked List is Sorted Remove Duplicates from Sorted Linked List Let\u0026rsquo;s Code to Remove Duplicates from Sorted Linked List Reversing a Linked List Reversing using Sliding Pointers Recursive Reverse for Linked List Let\u0026rsquo;s Code Reversing a Linked List Concatenating 2 Linked Lists Merging 2 Linked Lists Let\u0026rsquo;s Code to Concatenate and Merge Linked Lists Check for LOOP in Linked List Let\u0026rsquo;s Code to Check LOOP Let\u0026rsquo;s Code a C++ class for Linked List Circular Linked List Display Circular Linked List Let‚Äôs Code Circular Linked List Inserting in a Circular Linked List Let\u0026rsquo;s Code Insert for a Circular Linked List Deleting From Circular Linked List Let\u0026rsquo;s Code Delete for Circular Linked List Doubly Linked List Let\u0026rsquo;s Code Doubly Linked List Insert in a Doubly Linked List Let\u0026rsquo;s Code Insert for Doubly Linked List Deleting from Doubly Linked List Let\u0026rsquo;s Code Delete for Doubly Linked List Reverse a Doubly Linked List Let\u0026rsquo;s Code Reverse for Doubly Linked List Circular Doubly Linked List Comparison of Linked List Comparison of Array with Linked List Student Challenge : Finding Middle Element of a Linked List. Student Challenge : Finding Intersecting point of Two Linked List Sparse Matrix and Polynomial using Linked List # Student Challenge : Sparse Matrix using Linked List Student Challenge: Polynomial Representation using Linked List Let\u0026rsquo;s Code Polynomial Stack # Introduction to Stack Stack using Array Implementation os Stack using Array Let\u0026rsquo;s Code Stack using Array Stack using Linked List Stack Operations using Linked List Let\u0026rsquo;s Code Stack using Linked List Let\u0026rsquo;s Code C++ class for Stack using Linked List Parenthesis Matching Program for Parenthesis Matching Let\u0026rsquo;s Code Parenthesis Matching More on Parenthesis Matching Infix to Postfix Conversion Associativity and Unary Operators Infix to Postfix using Stack Method 1 Infix to Postfix using Stack Method 2 Program for Infix to Postfix Conversion Let\u0026rsquo;s Code Infix to Postfix Conversion Student Challenge: Infix to Postfix with Associativity and Parenthesis Evaluation of Postfix Expression Program for Evaluation of Postfix Let\u0026rsquo;s Code Evaluation of Postfix Queues # Queue ADT Queue using Single Pointer Queue using Two Pointers Implementing Queue using Array Let\u0026rsquo;s Code Queue using Array Let\u0026rsquo;s Code Queue in C++ Drawback of Queue using Array Circular Queue Let\u0026rsquo;s Code Circular Queue Queue using Linked List Let\u0026rsquo;s Code Queue using Linked List Double Ended Queue DEQUEUE Priority Queues Queue using 2 Stacks Trees # Terminology Number of Binary Trees using N Nodes Height vs Nodes in Binary Tree Internal Nodes vs External Nodes in Binary Tree Strict Binary Tree Height vs Node of Strict Binary Tree Internal vs External Nodes of Strict Binary Trees n-ary Trees Analysis of n-Ary Trees Representation of Binary Tree Linked Representation of Binary Tree Full vs Complete Binary Tree Strict vs Complete Binary Tree Binary Tree Traversals Binary Tree Traversal Easy Method 1 Binary Tree Traversal Easy Method 2 Binary Tree Traversal Easy Method 3 Creating Binary Tree Program to Create Binary Tree Let\u0026rsquo;s Code Creating Binary Tree Let\u0026rsquo;s Code Creating Binary Tree in C++ Preorder Tree Traversal Inorder Tree Traversals Functions Iterative Preorder Iterative Inorder Let\u0026rsquo;s Code Iterative Traversals Level Order Traversal Let\u0026rsquo;s Code Level Order Traversal Can we Generate Tree from Traversals Generating Tree from Traversals Height and Count of Binary Tree Let\u0026rsquo;s Code Height and Count Student Challenge : Count Leaf Nodes of a Binary Tree Binary Search Trees # BST intro Searching in a Binary Search Tree Inserting in a Binary Search Tree Recursive Insert in Binary Search Tree Creating a Binary Search Tree Let\u0026rsquo;s code Binary Search Tree Deleting from Binary Search Tree Let\u0026rsquo;s Code Recursive Insert and Delete on BST Generating BST from Preorder Program for Generating BST from Preorder Drawbacks of Binary Search Tree AVL Trees # Introduction to AVL Trees Inserting in AVL with Rotations General form of AVL Rotations Let\u0026rsquo;s Code LL Rotation on AVL Let\u0026rsquo;s Code LR Rotation on AVL Generating AVL Tree Deletion from AVL Tree with Rotations Height Analysis of AVL Trees Search Trees # 2-3 Trees 2-3-4 Trees Red-Black Trees Introduction Red-Black Tree creation Red-Black Trees vs 2-3-4 Trees Creating Red-Black Tree similar to Creating 2-3-4 Tree Red-Black Tree Deletion Cases Red-Black Tree Deletion Examples Red-Black Tree vs 2-3-4 Tree Deletion Heap # Introduction to Heap Inserting in a Heap Program to Insert in a Heap Creating a Heap Deleting from Heap and Heap Sort Let\u0026rsquo;s Code Heap Sort Heapify - Faster Method for creating Heap Heap as Priority Queue Sorting Techniques # Criteria used for Analysing Sorts Bubble Sort Let\u0026rsquo;s Code Bubble Sort Insertion Sort Insertion Sort Continued\u0026hellip;. Program for Insertion Sort Analysis of Insertion Sort Let\u0026rsquo;s Code Insertion Sort Comparing Bubble and Insertion Sort Selection Sort Program for Selection Sort Analysis of Selection Sort Let\u0026rsquo;s Code Selection Sort Idea behind Quick Sort Quick Sort Analysis of Quick Sort Analysis of Quick Sort Continued\u0026hellip;.. Let\u0026rsquo;s Code Quick Sort Merging Iterative Merge Sort Let\u0026rsquo;s Code Iterative Merge Sort Recursive Merge Sort Let\u0026rsquo;s Code Recursive Merge Sort Count Sort Let\u0026rsquo;s Code Count Sort Bin / Bucket Sort Radix Sort Shell Sort Let\u0026rsquo;s Code Shell Sort Hashing Technique # Introduction to Hashing Chaining Let\u0026rsquo;s Code Chaining Linear Probing Let\u0026rsquo;s Code Linear Probing Quadratic Probing Double Hashing Hash Function Ideas Graphs # Introduction to Graphs Representation of Undirected Graph Representation of Directed Graphs Breadth First Search Program for BFS Depth First Search Program for DFS Let\u0026rsquo;s Code BFS \u0026amp; DFS Spanning Trees Prim\u0026rsquo;s Minimum Cost Spanning Tree Prim\u0026rsquo;s Program Let\u0026rsquo;s Code Prim\u0026rsquo;s using Kruskal\u0026rsquo;s Minimum Cost Spanning Tree Disjoint Subsets Kruskal\u0026rsquo;s Program Let\u0026rsquo;s Code Kruskla\u0026rsquo;s Program Asymptotic Notations # Asymptotic Notations Big Oh , Omega , Theta PDF for All Programs ","date":"13 December 2022","permalink":"/blog/udemy/datastructurescncpp/","section":"Sipping Go","summary":"\u003cp\u003eIf you know and love mathematics, dont waste yuor time, this course is your best bet.\u003c/p\u003e","title":"Mastering Data Structures \u0026 Algorithms using C and C++"},{"content":"","date":"13 December 2022","permalink":"/tags/trees/","section":"Tags","summary":"","title":"trees"},{"content":"This articles breakdown the terminology used in trees data structure, as well as some types of trees and their use cases, to get familiar with them.\nTrees types and use cases # Whats a tree # A tree is a collection of nodes, each node holds some data, one of the nodes is the root node, and other nodes. are disjoints subsets and each subset is a tree or a sub tree.\nEach node has exactly one parent, and can have one or more children, no single node has more than one parent.\nTrees are everywhere:\nIf you wrote any switch statement but didnt knew why its more efficient than a bunch of if-else statements, the answer is Look up tables (LUT) which may use BST Operating systems use trees for File system. The syntactic representation of a programming language is Abstract syntax tree. AST Browser Document object model (DOM) Databases use Log structured merge tree. LSM tree SQL index use b-tree. Dynamic memory management uses heap. which is a type of a tree. A trie for dictionaries or auto complete algorithms. Priority queues as well use heap. Garbage collectors also use trees. https://en.wikipedia.org/wiki/Tree_(graph_theory)\nhttps://en.wikipedia.org/wiki/Tree_(data_structure)\nNodes or vertices # Nodes is every unit of data\nEdges or paths (links) # Its the connection between each two nodes, if we have N nodes we would have N-1 edges, because each node as parent, except the root node.\nRoot # Is the upmost node, who has no parent, and have only children, for the children nodes this is their most parent node, generally in the top of the tree.\nParent-Children # A node is a parent to its very next descendants. the descendants are the children to whom its connected with one single edge.\nSiblings # Are the children connected to the same node.\nDescendants # When we want to talk about children and their children, and the children of their children..etc we would say descendants.\nIt means the set of nodes we can reach from a particular node going to its children. so all the subtree.\nAnsestors # From that node to the root node, all this nodes are considered anscestors.\nDegree of nodes # Is the number of children a node has, so the direct children.\nA degree of a tree cannot be told from a tree, but its predefined, we can say its a binary tree. but if its unbalanced, we would see it in a form of a linkedlist.\nLeaf nodes, external or terminal # All nodes who has no children. so with nodes with degree 0\nLevels # Levels starting from first level 1, the root, as we categorize each level by all the nodes who take the same number of edges to get to the root node.\nHeight # Hight of nodes, is the same as the levels but it starts from 0, its very useful for analysis.\nForest # A collection of a tree is called a forest. which at least has a root node.\nTo convert a forest to a tree, we attach the roots of the present trees, to one single root.\nTypes of trees # There is many types of trees, and they are extremely useful and popular. for example\nBinary tree # One of the most popular trees, is the binary tree,\nIts tree of degree 2, means every node can have 0,1 or 2 children, but not more than 2.\n$deg(T)=2$\n$children={{0,1,2}}$\nBecause the nodes can have only 2 nodes, we call them left child and right child. or left node and right node. If we come across a tree that is unbalanced, means it forms something like a linked list, but to the left side, we call it left skewed binary tree. or right skewed binary tree Binary search tree # The binary search tree or BST , is a derivate of binary tree, but with a constraint in the data, Its a rooted binary tree, where every node (data) on the left side is grater than nodes on the right side.\n$deg(T)=2$\nAVL Tree # Another tree named after inventors¬†Adelson-Velsky and¬†Landis, is a self balancing binary search tree.\nDecision Tree # Its one of the popular ones for classification and prediction.\nFenwich Tree # A¬†Fenwick tree¬†or¬†binary indexed tree¬†is a data structure that can efficiently update elements and calculate¬†prefix sums¬†in a table of numbers.\nLink to wiki\nLog structured Merge Tree # Or LSM tree one of the trees used in databases like influxDB.\n","date":"9 December 2022","permalink":"/blog/trees-data-structure-with-types-and-use-cases/","section":"Sipping Go","summary":"\u003cp\u003eThis articles breakdown the terminology used in trees data structure, as well as some types of trees and their use cases, to get familiar with them.\u003c/p\u003e","title":"Trees data structure with types (uses cases included)"},{"content":"","date":"11 March 2022","permalink":"/tags/css/","section":"Tags","summary":"","title":"css"},{"content":"","date":"11 March 2022","permalink":"/tags/html/","section":"Tags","summary":"","title":"html"},{"content":"","date":"11 March 2022","permalink":"/tags/markdown/","section":"Tags","summary":"","title":"markdown"},{"content":"This article offers a sample of basic Markdown formatting that can be used in Congo, also it shows how some basic HTML elements are decorated.\nHeadings # The following HTML \u0026lt;h1\u0026gt;‚Äî\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 # H2 # H3 # H4 # H5 # H6 # Paragraph # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes # The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n‚Äî Rob Pike1\nTables # Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables # Italics Bold Code italics bold code Code Blocks # Code block with backticks # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types # Ordered List # First item Second item Third item Unordered List # List item Another item And another item Nested list # Fruit Apple Orange Banana Dairy Milk Cheese Other Elements ‚Äî abbr, sub, sup, kbd, mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk about nothing during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"11 March 2022","permalink":"/blog/markdown/","section":"Sipping Go","summary":"\u003cp\u003eThis article offers a sample of basic Markdown formatting that can be used in Congo, also it shows how some basic HTML elements are decorated.\u003c/p\u003e","title":"Markdown"},{"content":"","date":"11 March 2022","permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]